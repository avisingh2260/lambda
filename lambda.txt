import javax.sql.DataSource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import java.util.List;
import java.util.Map;

@EnableScheduling
public class DB2ToPostgreSQLTransfer {

  private final DataSource db2DataSource;
  private final DataSource postgreDataSource;
  private final JdbcTemplate db2JdbcTemplate;
  private final JdbcTemplate postgreJdbcTemplate;

  public DB2ToPostgreSQLTransfer() {
    // Create DB2 data source
    db2DataSource = createDataSource("jdbc/db2DataSource");

    // Create PostgreSQL data source
    postgreDataSource = createDataSource("jdbc/postgreDataSource");

    // Create JdbcTemplate instances for both data sources
    db2JdbcTemplate = new JdbcTemplate(db2DataSource);
    postgreJdbcTemplate = new JdbcTemplate(postgreDataSource);
  }

  @Scheduled(cron = "0 0 6 * * *", zone = "America/New_York")
  public void transferData() {
    // Get the max doc_id value in PostgreSQL
    Long maxDocId = postgreJdbcTemplate.queryForObject("SELECT MAX(doc_id) FROM TABLE_NAME", Long.class);
    if (maxDocId == null) {
      maxDocId = 0L;
    }

    // Query delta data from DB2
    List<Map<String, Object>> deltaData = db2JdbcTemplate.queryForList(
      "SELECT * FROM TABLE_NAME WHERE doc_id > ?",
      maxDocId
    );

    // Insert delta data into PostgreSQL
    for (Map<String, Object> row : deltaData) {
      postgreJdbcTemplate.update(
        "INSERT INTO TABLE_NAME (doc_id, COLUMN1, COLUMN2) VALUES (?, ?, ?)",
        row.get("doc_id"),
        row.get("COLUMN1"),
        row.get("COLUMN2")
      );
    }

    System.out.println("Data transfer complete.");
  }

  private static DataSource createDataSource(String jndiName) {
    try {
      // Try to get the data source from the JNDI context
      JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();
      DataSource dataSource = dataSourceLookup.getDataSource(jndiName);
      return dataSource;
    } catch (Exception e) {
      // If the data source cannot be found in JNDI, create it programmatically
      DriverManagerDataSource dataSource = new DriverManagerDataSource();
      if (jndiName.equals("jdbc/db2DataSource")) {
        dataSource.setDriverClassName("com.ibm.db2.jcc.DB2Driver");
        dataSource.setUrl("jdbc:db2://localhost:50000/DBNAME");
        dataSource.setUsername("DB2_USERNAME");
        dataSource.setPassword("DB2_PASSWORD");
      } else if (jndiName.equals("jdbc/postgreDataSource")) {
        dataSource.setDriverClassName("org.postgresql.Driver");
        dataSource.setUrl("jdbc:postgresql://localhost:5432/DBNAME");
        dataSource.setUsername("POSTGRE_USERNAME");
        dataSource.setPassword("POSTGRE_PASSWORD");
      }
      return dataSource;
    }
  }

}
